"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const constants_1 = require("../../utils/constants");
const merge_package_json_1 = require("../../utils/merge-package-json");
// import { TsmOptions } from '../../types';
// todo: replace
const readPkg = require('read-pkg');
const writePkg = require('write-pkg');
/**
 * Smart merge of package.json files like Object.assign({}, src, dist)
 * @param opts
 * @param localDependencies
 * @param options
 */
function buildPkgJson(opts, localDependencies, options) {
    // read base package.json
    const base = readPkg.sync(constants_1.ROOT);
    // read package.json in module root folder
    const module = readPkg.sync(opts.src);
    // merge packages
    localDependenciesVersionFallback(base, localDependencies);
    const pkg = merge_package_json_1.mergePackageJson({ base, module, localDependencies });
    pkg.version = pkg.version || base.version;
    // write packages
    // todo: for some reason, read pkg ignores readme.md and says that readme not found, and this is not true
    delete pkg.readme;
    return writePkg(opts.dist, pkg);
}
exports.buildPkgJson = buildPkgJson;
/**
 *
 * @param tsmOptions
 * @param options
 */
function buildPkgs(tsmOptions, options) {
    // 0. read base package.json
    // 1. read all sub module packages
    // 2. include sub module versions in modules hash
    // if options.local === true, resolve local dependencies as file paths: "module-a": "../module-a"
    // in general you need non relative dependencies only before publishing
    const localDependencies = tsmOptions.reduce((memo, val) => {
        memo[val.pkg.name] = !options.local ? val.pkg.version : path.resolve(val.dist);
        return memo;
    }, {});
    // 3. merge packages
    return Promise.all(tsmOptions.map(optPkg => buildPkgJson(optPkg, localDependencies, options)));
    // 4. validate required fields in packages
    // todo:
}
exports.buildPkgs = buildPkgs;
function localDependenciesVersionFallback(base, localDependencies) {
    for (let pkgName in localDependencies) {
        localDependencies[pkgName] = localDependencies[pkgName] || base.version;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQtcGtnLWpzb24udGFzay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YXNrcy9ucG0vYnVpbGQtcGtnLWpzb24udGFzay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE4QjtBQUM5QixxREFBNkM7QUFDN0MsdUVBQWlFO0FBQ2pFLDRDQUE0QztBQUM1QyxnQkFBZ0I7QUFDaEIsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3BDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUV0Qzs7Ozs7R0FLRztBQUNILHNCQUE2QixJQUFlLEVBQUUsaUJBQWlCLEVBQUUsT0FBeUI7SUFDeEYseUJBQXlCO0lBQ3pCLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQUksQ0FBQyxDQUFDO0lBQ2hDLDBDQUEwQztJQUMxQyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN0QyxpQkFBaUI7SUFDakIsZ0NBQWdDLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDMUQsTUFBTSxHQUFHLEdBQUcscUNBQWdCLENBQUMsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUFDLENBQUMsQ0FBQztJQUNoRSxHQUFHLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUMxQyxpQkFBaUI7SUFDakIseUdBQXlHO0lBQ3pHLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQztJQUNsQixNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDbEMsQ0FBQztBQWJELG9DQWFDO0FBRUQ7Ozs7R0FJRztBQUNILG1CQUEwQixVQUF1QixFQUFFLE9BQXlCO0lBQzFFLDRCQUE0QjtJQUM1QixrQ0FBa0M7SUFDbEMsaURBQWlEO0lBQ2pELGlHQUFpRztJQUNqRyx1RUFBdUU7SUFDdkUsTUFBTSxpQkFBaUIsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBQyxFQUFFO1FBQ3ZELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9FLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDUCxvQkFBb0I7SUFDcEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9GLDBDQUEwQztJQUMxQyxRQUFRO0FBQ1YsQ0FBQztBQWRELDhCQWNDO0FBRUQsMENBQTBDLElBQUksRUFBRSxpQkFBaUI7SUFDL0QsR0FBRyxDQUFDLENBQUMsSUFBSSxPQUFPLElBQUksaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxHQUFHLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDMUUsQ0FBQztBQUNILENBQUMifQ==