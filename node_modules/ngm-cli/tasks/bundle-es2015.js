"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require('path');
const execa = require('execa');
const rollup = require('rollup');
const resolve = require('rollup-plugin-node-resolve');
const commonjs = require('rollup-plugin-commonjs');
const inline_resources_1 = require("../helpers/inline-resources");
const rollup_globals_1 = require("../models/rollup.globals");
const bundlesDir = 'bundles';
function bundleEs2015(config) {
    return __awaiter(this, void 0, void 0, function* () {
        yield inline_resources_1.inlineResources(config.tmp);
        yield execa('ngc', ['-p', config.tmp], { preferLocal: true });
        return rollup.rollup({
            input: path.resolve(config.tmp, 'dist-es2015', config.input.replace('.ts', '')),
            external: Object.keys(rollup_globals_1.default),
            plugins: [
                resolve({
                    module: true,
                    main: true
                }),
                commonjs({
                    include: 'node_modules/**',
                })
            ],
            onwarn: warning => {
                const skip_codes = [
                    'THIS_IS_UNDEFINED',
                    'MISSING_GLOBAL_NAME'
                ];
                if (skip_codes.indexOf(warning.code) != -1)
                    return;
                console.error(warning);
            }
        }).then(bundle => bundle.write({
            file: path.resolve(config.dist, bundlesDir, config.name + '.es2015.js'),
            name: config.name,
            format: 'es',
            sourcemap: true
        }));
    });
}
exports.bundleEs2015 = bundleEs2015;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLWVzMjAxNS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90YXNrcy9idW5kbGUtZXMyMDE1LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0IsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqQyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQztBQUN0RCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUVuRCxrRUFBOEQ7QUFDOUQsNkRBQXNEO0FBRXRELE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQztBQUc3QixzQkFBbUMsTUFBTTs7UUFDdkMsTUFBTSxrQ0FBZSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQyxNQUFNLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDOUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDbkIsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxhQUFhLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQy9FLFFBQVEsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLHdCQUFjLENBQUM7WUFDckMsT0FBTyxFQUFFO2dCQUNQLE9BQU8sQ0FBQztvQkFDTixNQUFNLEVBQUUsSUFBSTtvQkFDWixJQUFJLEVBQUUsSUFBSTtpQkFDWCxDQUFDO2dCQUNGLFFBQVEsQ0FBQztvQkFDUCxPQUFPLEVBQUUsaUJBQWlCO2lCQUMzQixDQUFDO2FBQ0g7WUFDRCxNQUFNLEVBQUUsT0FBTyxDQUFDLEVBQUU7Z0JBQ2hCLE1BQU0sVUFBVSxHQUFHO29CQUNqQixtQkFBbUI7b0JBQ25CLHFCQUFxQjtpQkFDdEIsQ0FBQztnQkFDRixFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFBQyxNQUFNLENBQUM7Z0JBQ25ELE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDekIsQ0FBQztTQUNGLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQzdCLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDO1lBQ3ZFLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtZQUNqQixNQUFNLEVBQUUsSUFBSTtZQUNaLFNBQVMsRUFBRSxJQUFJO1NBQ2hCLENBQUMsQ0FBQyxDQUFDO0lBRU4sQ0FBQztDQUFBO0FBOUJELG9DQThCQyJ9