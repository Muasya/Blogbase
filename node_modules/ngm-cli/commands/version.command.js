"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// import { TsmOptions } from '../types';
const execa = require('execa');
const path = require('path');
const Listr = require("listr");
const submodules_resolution_1 = require("../utils/submodules-resolution");
const npm_version_task_1 = require("../tasks/npm/npm-version.task");
function run(cli) {
    const { project, verbose, message, gitTagVersion, yarn, skipPush } = cli.flags;
    const noGitTagVersion = gitTagVersion === false;
    const version = cli.input[1];
    if (!version) {
        return Promise.reject('Error: please provide version like (patch, major, prerelase, 1.2.3, etc.');
    }
    return submodules_resolution_1.findSubmodules(project)
        .then((opts) => {
        // 1. version all sub modules
        // 2. version root package
        const tasks = new Listr([
            {
                title: 'Version all submodules',
                task: () => new Listr(opts.map(opt => ({
                    title: `npm version  (${opt.pkg.name}: ${opt.src})`,
                    task: () => npm_version_task_1.npmVersion({ yarn, src: opt.src, version, noGitTagVersion: true })
                })))
            },
            {
                title: 'git add -A',
                task: () => execa.shell('git add -A'),
                skip: () => noGitTagVersion
            },
            {
                title: 'Version root package',
                task: () => npm_version_task_1.npmVersion({ yarn, src: '.', version, message, noGitTagVersion: true })
            },
            {
                title: 'Create version commit',
                task: () => {
                    const pkg = require(path.resolve('package.json'));
                    return execa.stdout('git', ['commit', '-am', message || `v${pkg.version}`]);
                },
                skip: () => noGitTagVersion
            },
            {
                title: 'Add tag version',
                task: () => {
                    const pkg = require(path.resolve('package.json'));
                    return execa.stdout('git', ['tag', `v${pkg.version}`]);
                },
                skip: () => noGitTagVersion
            },
            {
                title: 'Push to origin with tags',
                task: () => {
                    const currentBranch = execa.shellSync(`git branch | sed -n '/\* /s///p'`).stdout;
                    return execa.stdout('git', ['push', 'origin', currentBranch, '--tags']);
                },
                skip: () => skipPush
            }
        ], { renderer: verbose ? 'verbose' : 'default' });
        return tasks.run();
    });
}
exports.run = run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5jb21tYW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbW1hbmRzL3ZlcnNpb24uY29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUF5QztBQUN6QyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDL0IsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLCtCQUFnQztBQUNoQywwRUFBZ0U7QUFDaEUsb0VBQTJEO0FBRTNELGFBQW9CLEdBQUc7SUFDckIsTUFBTSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztJQUM3RSxNQUFNLGVBQWUsR0FBRyxhQUFhLEtBQUssS0FBSyxDQUFDO0lBQ2hELE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFN0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ2IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsMEVBQTBFLENBQUMsQ0FBQztJQUNwRyxDQUFDO0lBRUQsTUFBTSxDQUFDLHNDQUFjLENBQUMsT0FBTyxDQUFDO1NBQzNCLElBQUksQ0FBQyxDQUFDLElBQWtCLEVBQUUsRUFBRTtRQUMzQiw2QkFBNkI7UUFDN0IsMEJBQTBCO1FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDO1lBQ3RCO2dCQUNFLEtBQUssRUFBRSx3QkFBd0I7Z0JBQy9CLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLEtBQUssQ0FDbkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBQ2YsS0FBSyxFQUFFLGlCQUFpQixHQUFHLENBQUMsR0FBRyxDQUFD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