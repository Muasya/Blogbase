"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Listr = require('listr');
const utils_1 = require("../utils");
const tasks_1 = require("../tasks");
// todo: 'npm-link` doesn't track adding new files,
// so watch mode should be added
function npmLinkCommand({ project, local, deep, verbose, yarn, here }) {
    const noDeepLinking = deep === false;
    // 1. clean dist folders
    // 2.1 merge pkg json
    // 2.2 validate pkg (main, module, types)
    // 2.3 write pkg
    // 3. compile ts
    return utils_1.findSubmodules(project, { local })
        .then((opts) => new Listr([
        {
            title: 'Link all submodules',
            task: () => {
                const linkingTasks = new Listr(opts.map(opt => ({
                    title: `npm link ${opt.pkg.name} (from: ${opt.dist})`,
                    task: () => tasks_1.npmLink({ yarn, cwd: opt.dist })
                })));
                if (noDeepLinking) {
                    return linkingTasks;
                }
                opts.filter(opt => opt.cross.length > 0)
                    .forEach(opt => opt.cross
                    .forEach(crossName => linkingTasks.add({
                    title: `npm link ${crossName} to ${opt.pkg.name} (${opt.src})`,
                    task: () => tasks_1.npmLink({ yarn, cwd: opt.dist, module: crossName })
                })));
                return linkingTasks;
            }
        },
        {
            title: 'Link submodules to local project',
            task: () => new Listr(opts.map(opt => ({
                title: `npm link ${opt.pkg.name}`,
                task: () => tasks_1.npmLink({ yarn, module: opt.pkg.name, cwd: '.' })
            }))),
            skip: () => here !== true
        }
    ], { renderer: verbose ? 'verbose' : 'default' }));
}
exports.npmLinkCommand = npmLinkCommand;
function run(cli) {
    const { project, verbose, local, deep, yarn, here } = cli.flags;
    return npmLinkCommand({ project, verbose, local, deep, yarn, here })
        .then(tasks => tasks.run());
}
exports.run = run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay5jb21tYW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbW1hbmRzL2xpbmsuY29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMvQixvQ0FBMEM7QUFDMUMsb0NBQW1DO0FBRW5DLG1EQUFtRDtBQUNuRCxnQ0FBZ0M7QUFFaEMsd0JBQStCLEVBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUM7SUFDeEUsTUFBTSxhQUFhLEdBQUcsSUFBSSxLQUFLLEtBQUssQ0FBQztJQUNyQyx3QkFBd0I7SUFDeEIscUJBQXFCO0lBQ3JCLHlDQUF5QztJQUN6QyxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLE1BQU0sQ0FBQyxzQkFBYyxDQUFDLE9BQU8sRUFBRSxFQUFDLEtBQUssRUFBQyxDQUFDO1NBQ3BDLElBQUksQ0FBQyxDQUFDLElBQWtCLEVBQUUsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDO1FBQ3RDO1lBQ0UsS0FBSyxFQUFFLHFCQUFxQjtZQUM1QixJQUFJLEVBQUUsR0FBRyxFQUFFO2dCQUNULE1BQU0sWUFBWSxHQUFHLElBQUksS0FBSyxDQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDZixLQUFLLEVBQUUsWUFBWSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksV0FBVyxHQUFHLENBQUMsSUFBSSxHQUFHO29CQUNyRCxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsZUFBTyxDQUFDLEVBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFDLENBQUM7aUJBQzNDLENBQUMsQ0FBQyxDQUNKLENBQUM7Z0JBRUYsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztvQkFDbEIsTUFBTSxDQUFDLFlBQVksQ0FBQztnQkFDdEIsQ0FBQztnQkFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO3FCQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSztxQkFDdEIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FDcEM7b0JBQ0UsS0FBSyxFQUFFLFlBQVksU0FBUyxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxHQUFHLEdBQUc7b0JBQzlELElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxlQUFPLENBQUMsRUFBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBQyxDQUFDO2lCQUM5RCxDQUNGLENBQUMsQ0FBQyxDQUFDO2dCQUNSLE1BQU0sQ0FBQyxZQUFZLENBQUM7WUFDdEIsQ0FBQztTQUNGO1FBQ0Q7WUFDRSxLQUFLLEVBQUUsa0NBQWtDO1lBQ3pDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLEtBQUssQ0FDbkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2YsS0FBSyxFQUFFLFlBQVksR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUU7Z0JBQ2pDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxlQUFPLENBQUMsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUMsQ0FBQzthQUM1RCxDQUFDLENBQUMsQ0FDSjtZQUNELElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSTtTQUUxQjtLQUNGLEVBQUUsRUFBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBQyxDQUFDLENBQUMsQ0FBQztBQUNyRCxDQUFDO0FBOUNELHdDQThDQztBQUVELGFBQW9CLEdBQUc7SUFDckIsTUFBTSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztJQUM5RCxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQztTQUMvRCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUNoQyxDQUFDO0FBSkQsa0JBSUMifQ==