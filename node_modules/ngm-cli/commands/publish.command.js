"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// import { TsmOptions } from '../types';
const utils_1 = require("../utils");
const tasks_1 = require("../tasks");
const link_command_1 = require("./link.command");
/**
 * Heavily inspired by https://github.com/sindresorhus/np
 * */
const execa = require('execa');
const Listr = require("listr");
function run(cli, { buildCommand }) {
    const { project, verbose, tag, access, anyBranch, skipCleanup, skipGitCheck, yarn, yolo, skipPublish } = cli.flags;
    return utils_1.findSubmodules(project)
        .then((opts) => {
        const tasks = new Listr([
            {
                title: 'Git checks',
                task: () => tasks_1.prepublishGitCheck({ anyBranch }),
                skip: () => skipGitCheck || yolo
            },
            // test command
            {
                title: 'Installing dependencies',
                task: () => new Listr(tasks_1.npmInstall({ skipCleanup, yarn })),
                skip: () => yolo
            },
            {
                title: 'Running unit tests tests',
                task: () => execa('npm', ['test']),
                skip: () => yolo
            },
            // e2e command
            {
                title: 'Build submodules for e2e',
                task: () => buildCommand({ project, verbose, clean: true, local: true }),
                skip: () => yolo
            },
            {
                title: 'Link submodules',
                task: () => link_command_1.npmLinkCommand({ project, local: true, deep: true, verbose, yarn, here: true }),
                skip: () => yolo
            },
            // publish
            // set numeric package version before publish
            {
                title: 'Build submodules for publish',
                task: () => buildCommand({ project, verbose, clean: true, local: false })
            },
            {
                title: 'Publish all submodules',
                task: () => new Listr(opts.map(opt => ({
                    title: `npm publish (${opt.pkg.name}) (from: ${opt.dist})`,
                    task: () => tasks_1.npmPublish({ yarn, cwd: opt.dist, tag, access })
                }))),
                skip: () => skipPublish
            },
            {
                title: 'Pushing tags',
                task: () => execa('git', ['push', '--follow-tags']),
                skip: () => true
            }
        ], { renderer: verbose ? 'verbose' : 'default' });
        return tasks.run();
    });
}
exports.run = run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGlzaC5jb21tYW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbW1hbmRzL3B1Ymxpc2guY29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUF5QztBQUN6QyxvQ0FBMEM7QUFDMUMsb0NBQStFO0FBQy9FLGlEQUFnRDtBQUNoRDs7S0FFSztBQUNMLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMvQiwrQkFBZ0M7QUFFaEMsYUFBb0IsR0FBRyxFQUFFLEVBQUMsWUFBWSxFQUFDO0lBQ3JDLE1BQU0sRUFDSixPQUFPLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUN4QyxXQUFXLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUNuRCxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7SUFFZCxNQUFNLENBQUMsc0JBQWMsQ0FBQyxPQUFPLENBQUM7U0FDM0IsSUFBSSxDQUFDLENBQUMsSUFBa0IsRUFBRSxFQUFFO1FBQzNCLE1BQU0sS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDO1lBQ3RCO2dCQUNFLEtBQUssRUFBRSxZQUFZO2dCQUNuQixJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsMEJBQWtCLENBQUMsRUFBQyxTQUFTLEVBQUMsQ0FBQztnQkFDM0MsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLFlBQVksSUFBSSxJQUFJO2FBQ2pDO1lBQ0QsZUFBZTtZQUNmO2dCQUNFLEtBQUssRUFBRSx5QkFBeUI7Z0JBQ2hDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxrQkFBVSxDQUFDLEVBQUMsV0FBVyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7Z0JBQ3RELElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJO2FBQ2pCO1lBQ0Q7Z0JBQ0UsS0FBSyxFQUFFLDBCQUEwQjtnQkFDakMsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDbEMsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUk7YUFDakI7WUFDRCxjQUFjO1lBQ2Q7Z0JBQ0UsS0FBSyxFQUFFLDBCQUEwQjtnQkFDakMsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDLENBQUM7Z0JBQ3RFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJO2FBQ2pCO1lBQ0Q7Z0JBQ0UsS0FBSyxFQUFFLGlCQUFpQjtnQkFDeEIsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLDZCQUFjLENBQUMsRUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBQyxDQUFDO2dCQUN6RixJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSTthQUNqQjtZQUNELFVBQVU7WUFDViw2Q0FBNkM7WUFDN0M7Z0JBQ0UsS0FBSyxFQUFFLDhCQUE4QjtnQkFDckMsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDLENBQUM7YUFDeEU7WUFDRDtnQkFDRSxLQUFLLEVBQUUsd0JBQXdCO2dCQUMvQixJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBQ25DLEtBQUssRUFBRSxnQkFBZ0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLFlBQVksR0FBRyxDQUFDLElBQUksR0FBRztvQkFDMUQsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLGtCQUFVLENBQUMsRUFBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBQyxDQUFDO2lCQUMzRCxDQUFDLENBQUMsQ0FDSjtnQkFDRCxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsV0FBVzthQUN4QjtZQUNEO2dCQUNDLEtBQUssRUFBRSxjQUFjO2dCQUNyQixJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sRUFBRSxlQUFlLENBQUMsQ0FBQztnQkFDbkQsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUk7YUFDZjtTQUNILEVBQUUsRUFBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBQyxDQUFDLENBQUM7UUFFaEQsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUE1REQsa0JBNERDIn0=